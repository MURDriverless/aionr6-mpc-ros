#!/usr/bin/env python

# Python program to implement rover client recieving states 
import socket 
import sys 
import numpy as np
import rospy
import time
from geometry_msgs.msg import Pose

def main():

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    IP_address = '10.42.0.239' 
    Port = 8081

    # Wait till server goes online
    while True:
      try:
          server.connect((IP_address, Port)) 
          break
      except socket.error:
          time.sleep(2)
    
    # Initialize the ROS node
    rospy.init_node('get_states')
    
    # Define the publisher
    pub = rospy.Publisher('rover/states', Pose, queue_size=1)
    rate = rospy.Rate(10) # sample rate
    
    while not rospy.is_shutdown():
        send_time = time.time()
        server.send("ready")
        
        # Read rover states
        msg_len = int(server.recv(2))
        message = server.recv(msg_len)
        message = message.split(';')
        
        # Compute Latency
        latency = 1000*(time.time()-send_time)
        rospy.loginfo('Latency: {} ms'.format(latency))
        
        # Format rover states in Pose message type to publish
        pose = Pose()
        pose.position.x = float(message[0])
        pose.position.y = float(message[1])
        pose.position.z = 0.
        pose.orientation.x = 0.
        pose.orientation.y = 0.
        pose.orientation.z = np.sin(np.deg2rad(float(message[2])/2))
        pose.orientation.w = np.cos(np.deg2rad(float(message[2])/2))
        
        pub.publish(pose) # publishing rover states
        rate.sleep()

    server.close()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
